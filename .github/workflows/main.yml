name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        # Checkout the code from the repository
        run: echo "Code has been checked out"

      - name: Lint Code
        run: echo "Linting the repository to ensure code quality"
        # Add your linting commands here if needed

      - name: Run Unit Tests
        run: echo "Running unit tests to verify code functionality"
        # Add your test command here if needed

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        # Ensure we have the latest code
        run: echo "Checked out latest code for building Docker image"

      - name: Debug Directory Structure
        run: |
          echo "Current Directory: $(pwd)"
          ls -R
        # Debug: Show the directory structure to understand the repository layout

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
        # Install utilities for handling JSON and ZIP files

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        # Configure AWS credentials to interact with ECR
        run: echo "AWS credentials configured for region: ${{ secrets.AWS_REGION }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        # Login to Amazon ECR to interact with the container registry
        run: |
          echo "Logging into Amazon ECR..."
          aws ecr describe-repositories --region ${{ secrets.AWS_REGION }} # Debugging ECR repository access
          docker info  # Debugging Docker info to ensure proper setup

      - name: Build, Tag, and Push Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build the Docker image and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        # Push the built Docker image to Amazon ECR

  Continuous-Deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # Checkout the repository for deployment
        run: echo "Checked out code for deployment"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        # Configure AWS credentials for deployment
        run: |
          echo "AWS credentials configured for region: ${{ secrets.AWS_REGION }}"
          aws sts get-caller-identity  # Debug: Check IAM role/user identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        # Login to ECR to pull the Docker image
        run: |
          echo "Logging into Amazon ECR..."
          aws ecr describe-repositories --region ${{ secrets.AWS_REGION }} # Debugging ECR repository access
          docker info  # Debug Docker info to verify the login success

      - name: Pull Latest Docker Image
        run: |
          echo "Pulling the latest Docker image from ECR..."
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
          docker images  # Debug: List all images to confirm the pull was successful

      - name: Run Docker Image
        run: |
          echo "Running Docker container with the pulled image..."
          docker run -d -p 80:8080 --name=networksecurity \
            -e 'MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}' \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
          docker ps  # Debug: List running containers to verify the container is up

      - name: Clean Previous Docker Images and Containers
        run: |
          echo "Cleaning up old Docker images and containers..."
          docker system prune -f
          docker images  # Debug: List remaining images after cleanup
          docker ps -a  # Debug: List all containers to confirm that cleanup worked
